#pip install PyJWT
from flask import Flask, request, jsonify
from flask_cors import CORS
from transformers import pipeline
from sentence_transformers import SentenceTransformer, util
import torch
import jwt
import random
from functools import wraps
from datetime import datetime

# ğŸ”¹ QA ve embedding modelleri
#qa_pipeline = pipeline("question-answering", model="savasy/bert-base-turkish-squad")
#embedding_model = SentenceTransformer('all-MiniLM-L6-v2')
qa_pipeline = pipeline("question-answering", model="./models/qa_model")
embedding_model = SentenceTransformer('./models/embedding_model')

# ğŸ”¹ Ã–rnek veritabanÄ±
questions = [
    {
        "id": 1,
        "question_text": "Flutter nedir?"
    },
    {
        "id": 2,
        "question_text": "State management ne iÅŸe yarar?"
    },
    {
        "id": 3,
        "question_text": "Dart dili ile Flutter arasÄ±ndaki fark nedir?"
    },
    {
        "id": 4,
        "question_text": "Flutter'da widget nasÄ±l Ã§alÄ±ÅŸÄ±r?"
    },
    {
        "id": 5,
        "question_text": "Flutter'Ä±n avantajlarÄ± nelerdir?"
    },
    {
        "id": 6,
        "question_text": "Hot Reload ve Hot Restart arasÄ±ndaki fark nedir?"
    },
    {
        "id": 7,
        "question_text": "Flutter'da layout (yerleÅŸim) nasÄ±l yapÄ±lÄ±r?"
    },
    {
        "id": 8,
        "question_text": "PopÃ¼ler Flutter state management Ã§Ã¶zÃ¼mleri nelerdir?"
    },
    {
        "id": 9,
        "question_text": "Flutter neden yÃ¼ksek performanslÄ±dÄ±r?"
    },
    {
        "id": 10,
        "question_text": "Flutter projesinin temel yapÄ±sÄ± nasÄ±ldÄ±r?"
    }
]

answers = [
    {
        "id": 1,
        "question_id": 1,
        "answer_text": "Flutter, Google tarafÄ±ndan geliÅŸtirilen aÃ§Ä±k kaynaklÄ± bir UI (KullanÄ±cÄ± ArayÃ¼zÃ¼) geliÅŸtirme kitidir (SDK)."
    },
    {
        "id": 2,
        "question_id": 1,
        "answer_text": "Tek bir kod tabanÄ± kullanarak mobil (Android, iOS), web, masaÃ¼stÃ¼ (Windows, macOS, Linux) ve gÃ¶mÃ¼lÃ¼ sistemler iÃ§in gÃ¶rsel olarak Ã§ekici, hÄ±zlÄ± ve yerel olarak derlenmiÅŸ uygulamalar oluÅŸturmak iÃ§in kullanÄ±lÄ±r."
    },
    {
        "id": 3,
        "question_id": 1,
        "answer_text": "Kendi yÃ¼ksek performanslÄ± Skia grafik motorunu kullanarak UI'Ä± doÄŸrudan Ã§izer."
    },
    {
        "id": 4,
        "question_id": 2,
        "answer_text": "State management, bir Flutter uygulamasÄ±ndaki verilerin (state) durumunu yÃ¶netme ve bu durum deÄŸiÅŸtiÄŸinde kullanÄ±cÄ± arayÃ¼zÃ¼nÃ¼n (UI) otomatik olarak gÃ¼ncellenmesini saÄŸlama iÅŸlemidir."
    },
    {
        "id": 5,
        "question_id": 2,
        "answer_text": "Uygulama bÃ¼yÃ¼dÃ¼kÃ§e veri akÄ±ÅŸÄ±nÄ± kontrol altÄ±nda tutmayÄ±, bileÅŸenler arasÄ± veri paylaÅŸÄ±mÄ±nÄ± kolaylaÅŸtÄ±rmayÄ± ve kodun daha organize olmasÄ±nÄ± saÄŸlar."
    },
    {
        "id": 6,
        "question_id": 3,
        "answer_text": "Dart, Flutter uygulamalarÄ±nÄ± yazmak iÃ§in kullanÄ±lan nesne yÃ¶nelimli bir programlama dilidir. Google tarafÄ±ndan geliÅŸtirilmiÅŸtir."
    },
    {
        "id": 7,
        "question_id": 3,
        "answer_text": "Flutter ise Dart dilini kullanan bir UI framework'Ã¼ ve SDK'sÄ±dÄ±r. Uygulama arayÃ¼zÃ¼nÃ¼ oluÅŸturmak iÃ§in gerekli araÃ§larÄ±, widget'larÄ± ve kÃ¼tÃ¼phaneleri saÄŸlar."
    },
    {
        "id": 8,
        "question_id": 3,
        "answer_text": "KÄ±sacasÄ±, Dart 'dil', Flutter ise o dili kullanarak uygulama geliÅŸtirmeyi saÄŸlayan 'araÃ§ seti'dir."
    },
    {
        "id": 9,
        "question_id": 4,
        "answer_text": "Widget'lar, Flutter'da kullanÄ±cÄ± arayÃ¼zÃ¼nÃ¼ oluÅŸturan temel yapÄ± taÅŸlarÄ±dÄ±r. Ekrandaki her ÅŸey (butonlar, metinler, resimler, layout'lar vb.) bir widget'tÄ±r."
    },
    {
        "id": 10,
        "question_id": 4,
        "answer_text": "Flutter, widget'larÄ± bir aÄŸaÃ§ yapÄ±sÄ±nda (widget tree) birleÅŸtirerek arayÃ¼zÃ¼ oluÅŸturur. Her widget, kendi 'build' metodunda nasÄ±l gÃ¶rÃ¼neceÄŸini ve davranacaÄŸÄ±nÄ± tanÄ±mlar."
    },
    {
        "id": 11,
        "question_id": 4,
        "answer_text": "Temelde iki tÃ¼r widget vardÄ±r: StatelessWidget (durumu deÄŸiÅŸmeyen) ve StatefulWidget (durumu deÄŸiÅŸebilen ve bu deÄŸiÅŸikliklere gÃ¶re yeniden Ã§izilebilen)."
    },
    {
        "id": 12,
        "question_id": 5,
        "answer_text": "HÄ±zlÄ± GeliÅŸtirme: Hot Reload Ã¶zelliÄŸi sayesinde kod deÄŸiÅŸiklikleri anÄ±nda gÃ¶rÃ¼lÃ¼r."
    },
    {
        "id": 13,
        "question_id": 5,
        "answer_text": "Etkileyici ve Esnek UI: Zengin widget kÃ¼tÃ¼phanesi ve Ã¶zelleÅŸtirme imkanlarÄ± sunar."
    },
    {
        "id": 14,
        "question_id": 5,
        "answer_text": "YÃ¼ksek Performans: Kod doÄŸrudan yerel ARM makine koduna derlendiÄŸi iÃ§in yÃ¼ksek performans sunar."
    },
    {
        "id": 15,
        "question_id": 5,
        "answer_text": "Tek Kod TabanÄ±: FarklÄ± platformlar iÃ§in tek bir kod yazarak geliÅŸtirme sÃ¼resini ve maliyetini azaltÄ±r."
    },
    {
        "id": 16,
        "question_id": 6,
        "answer_text": "Hot Reload: Kod deÄŸiÅŸikliklerini Ã§alÄ±ÅŸan uygulamaya enjekte eder, uygulamanÄ±n mevcut durumunu (state) korur. Genellikle saniyeler sÃ¼rer. UI deÄŸiÅŸiklikleri iÃ§in idealdir."
    },
    {
        "id": 17,
        "question_id": 6,
        "answer_text": "Hot Restart: UygulamanÄ±n mevcut durumunu sÄ±fÄ±rlar ve uygulamayÄ± yeniden baÅŸlatÄ±r. Hot Reload'dan daha yavaÅŸtÄ±r ama state deÄŸiÅŸiklikleri veya bazÄ± kÃ¶klÃ¼ deÄŸiÅŸiklikler gerektiÄŸinde kullanÄ±lÄ±r."
    },
    {
        "id": 18,
        "question_id": 7,
        "answer_text": "Flutter'da layout, widget'lar kullanÄ±larak yapÄ±lÄ±r. `Row` (yatay), `Column` (dikey), `Stack` (Ã¼st Ã¼ste), `Container`, `Padding`, `Center`, `Align`, `Expanded` gibi widget'lar bileÅŸenleri ekranda konumlandÄ±rmak ve dÃ¼zenlemek iÃ§in kullanÄ±lÄ±r."
    },
    {
        "id": 19,
        "question_id": 7,
        "answer_text": "Widget'lar iÃ§ iÃ§e geÃ§irilerek karmaÅŸÄ±k layout yapÄ±larÄ± oluÅŸturulabilir."
    },
    {
        "id": 20,
        "question_id": 8,
        "answer_text": "Provider: Basit ve yaygÄ±n kullanÄ±lan, InheritedWidget Ã¼zerine kurulu bir Ã§Ã¶zÃ¼mdÃ¼r."
    },
    {
        "id": 21,
        "question_id": 8,
        "answer_text": "Riverpod: Provider'Ä±n geliÅŸtiricisi tarafÄ±ndan oluÅŸturulan, daha esnek ve derleme zamanÄ± gÃ¼venliÄŸi sunan modern bir Ã§Ã¶zÃ¼mdÃ¼r."
    },
    {
        "id": 22,
        "question_id": 8,
        "answer_text": "Bloc/Cubit: Ã–zellikle bÃ¼yÃ¼k ve karmaÅŸÄ±k uygulamalarda state yÃ¶netimini ve iÅŸ mantÄ±ÄŸÄ±nÄ± ayÄ±rmak iÃ§in kullanÄ±lan bir desendir."
    },
    {
        "id": 23,
        "question_id": 8,
        "answer_text": "GetX: State management, dependency injection ve route management gibi birÃ§ok Ã¶zelliÄŸi bir arada sunan bir mikro framework'tÃ¼r."
    },
    {
        "id": 24,
        "question_id": 9,
        "answer_text": "Flutter, UI'Ä± Ã§izmek iÃ§in platformun yerel UI bileÅŸenlerini (OEM widgets) kullanmak yerine kendi Skia grafik motorunu kullanÄ±r. Bu, platform farklÄ±lÄ±klarÄ±ndan kaynaklanan performans sorunlarÄ±nÄ± ortadan kaldÄ±rÄ±r."
    },
    {
        "id": 25,
        "question_id": 9,
        "answer_text": "Release modunda Dart kodu doÄŸrudan yerel ARM veya x64 makine koduna (Ahead-of-Time - AOT compilation) derlenir, bu da JavaScript kÃ¶prÃ¼sÃ¼ gibi ara katmanlara ihtiyaÃ§ duymadan yÃ¼ksek hÄ±zda Ã§alÄ±ÅŸmasÄ±nÄ± saÄŸlar."
    },
    {
        "id": 26,
        "question_id": 10,
        "answer_text": "Bir Flutter projesi genellikle ÅŸu ana dizinleri iÃ§erir: `lib` (Dart kodunun bulunduÄŸu ana dizin, `main.dart` baÅŸlangÄ±Ã§ dosyasÄ±dÄ±r), `android` / `ios` (platforma Ã¶zgÃ¼ proje dosyalarÄ±), `web`, `windows`, `linux`, `macos` (diÄŸer platformlar iÃ§in dosyalar), `test` (test kodlarÄ±), `pubspec.yaml` (proje baÄŸÄ±mlÄ±lÄ±klarÄ±nÄ± ve meta verilerini tanÄ±mlayan dosya)."
    }
]

def get_answers_by_question_id(q_id):
    return [a["answer_text"] for a in answers if a["question_id"] == q_id]

def find_top_matching_questions(user_question, top_n=3):
    question_texts = [q["question_text"] for q in questions]
    embeddings = embedding_model.encode(question_texts, convert_to_tensor=True)
    user_embedding = embedding_model.encode(user_question, convert_to_tensor=True)
    similarity_scores = util.cos_sim(user_embedding, embeddings)[0]

    top_indices = torch.topk(similarity_scores, top_n).indices.tolist()
    top_questions = []
    for idx in top_indices:
        q_id = questions[idx]["id"]
        score = similarity_scores[idx].item()
        top_questions.append({
            "id": q_id,
            "question_text": questions[idx]["question_text"],
            "similarity_score": score
        })

    return top_questions

def generate_comprehensive_answer(user_question, top_matched_questions):
    all_content = ""
    used_answers = set()

    for q in top_matched_questions:
        q_id = q["id"]
        all_answers = get_answers_by_question_id(q_id)
        for answer in all_answers:
            if answer not in used_answers:
                all_content += answer + " "
                used_answers.add(answer)

    result = qa_pipeline(question=user_question, context=all_content)
    comprehensive_answer = f"{result['answer']}\n\nDaha detaylÄ± bilgi:\n\n"

    for q in top_matched_questions:
        q_id = q["id"]
        q_text = q["question_text"]
        q_answers = get_answers_by_question_id(q_id)
        comprehensive_answer += f"ğŸ“Œ {q_text}\n"
        for i, ans in enumerate(q_answers, 1):
            comprehensive_answer += f"{i}. {ans}\n"
        comprehensive_answer += "\n"

    return comprehensive_answer

# Flask APP

app = Flask(__name__)
CORS(
    app,
    supports_credentials=True,  # credentials'a izin ver
    resources={
        r"/ask-ai": {
            "origins": "http://localhost:5173",  # Sadece bu origin'e izin ver
            "methods": ["POST", "OPTIONS"],  # Ä°zin verilen metodlar
            "allow_headers": ["Content-Type"],  # Ä°zin verilen header'lar
        }
    }
)
app.config['JWT_SECRET_KEY'] = 'SECRET'

def token_required(f):
    @wraps(f)
    def decorated(*args, **kwargs):
        token = None
        
        # Cookie'den token'Ä± alÄ±yoruz
        if 'token' in request.cookies:
            token = request.cookies.get('token')
        
        if not token:
            return jsonify({'error': 'Yetkisiz eriÅŸim.'}), 401
        
        try:
            # Token doÄŸrulama
            jwt.decode(token, app.config['JWT_SECRET_KEY'], algorithms=["HS256"])
        except jwt.ExpiredSignatureError:
            return jsonify({'error': 'Yetkisiz eriÅŸim.'}), 401
        except jwt.InvalidTokenError:
            return jsonify({'error': 'Yetkisiz eriÅŸim.'}), 401
            
        return f(*args, **kwargs)
    
    return decorated

@app.route("/ask-ai", methods=["POST"])
@token_required
def ask():
    data = request.get_json()
    user_question = data.get("question")

    if not user_question:
        return jsonify({"error": "Soru eksik."}), 400

    top_matched_questions = find_top_matching_questions(user_question, top_n=3)
    answer = generate_comprehensive_answer(user_question, top_matched_questions)

    return jsonify({
        "user": {
                "id": random.randint(0, 300),
                "content": user_question,
                "role": "user",
                "timestamp": datetime.now().isoformat()
        },
        "assistant": {
                "id": random.randint(0, 300),
                "content": answer,
                "role": "assistant",
                "timestamp": datetime.now().isoformat()
        }
    })

if __name__ == "__main__":
    app.run(debug=True)